name: Build, Test and Deploy FE and BE - Main
on:
  push:
    branches:
      - main
  pull_request_target:
    types:
      - closed

jobs:
  build:
    if: github.event_name == 'push' || github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'gradle'
      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v0
        with:
          versionSpec: '5.x'
      - name: Determine Version
        id: gitversion
        uses: gittools/actions/gitversion/execute@v0
      - name: Configure GPG Key
        run: |
          echo -n "$GPG_SIGNING_KEY" | base64 --decode | gpg --batch --import
        env:
          GPG_SIGNING_KEY: ${{ secrets.MAVEN_GPG_SIGNING_KEY }}
      - name: Setting GitVersion versions
        run: |
          echo "version=${{ steps.gitversion.outputs.fullSemVer }}\nsigning.gnupg.executable=gpg\nsigning.gnupg.keyName=${{ secrets.MAVEN_GPG_KEY_NAME }}\nsigning.gnupg.passphrase=${{ secrets.MAVEN_GPG_PASSPHRASE }}\n" > gradle.properties
          echo "DOCKER_IMAGE_VERSION=$(echo ${{ steps.gitversion.outputs.fullSemVer }} | sed -E "s/\+/_/g")" >> $GITHUB_ENV
      - name: Showing Docker Image Version
        run: echo $DOCKER_IMAGE_VERSION
      - name: Run Gradle test on WireQuery Java Core SDK
        working-directory: ./sdk/jvm/wirequery-java-core
        run: ./gradlew -Pversion="${{  steps.gitversion.outputs.fullSemVer }}" test && ./gradlew -Pversion="${{  steps.gitversion.outputs.fullSemVer }}" publishToMavenLocal --no-daemon
      - name: Run Gradle test on WireQuery Spring 5 SDK
        working-directory: ./sdk/jvm/wirequery-spring-5
        run: ./gradlew -Pversion="${{  steps.gitversion.outputs.fullSemVer }}" test && ./gradlew -Pversion="${{  steps.gitversion.outputs.fullSemVer }}" publishToMavenLocal --no-daemon
      - name: Run Gradle test on WireQuery Spring 6 SDK
        working-directory: ./sdk/jvm/wirequery-spring-6
        run: ./gradlew -Pversion="${{  steps.gitversion.outputs.fullSemVer }}" test && ./gradlew -Pversion="${{  steps.gitversion.outputs.fullSemVer }}" publishToMavenLocal --no-daemon
      - name: Run Gradle test on WireQuery Spring 2 Starter SDK
        working-directory: ./sdk/jvm/wirequery-spring-boot-2-starter
        run: ./gradlew -Pversion="${{  steps.gitversion.outputs.fullSemVer }}" test && ./gradlew -Pversion="${{  steps.gitversion.outputs.fullSemVer }}" publishToMavenLocal --no-daemon
      - name: Run Gradle test on WireQuery Spring 3 Starter SDK
        working-directory: ./sdk/jvm/wirequery-spring-boot-3-starter
        run: ./gradlew -Pversion="${{  steps.gitversion.outputs.fullSemVer }}" test && ./gradlew -Pversion="${{  steps.gitversion.outputs.fullSemVer }}" publishToMavenLocal --no-daemon
      - name: Run Gradle test on the Products Example
        working-directory: ./sdk/jvm/examples/spring-boot/products
        run: ./gradlew -Pversion="${{  steps.gitversion.outputs.fullSemVer }}" build
      - name: Run Gradle build on the Basket Example
        working-directory: ./sdk/jvm/examples/spring-boot/basket
        run: ./gradlew -Pversion="${{  steps.gitversion.outputs.fullSemVer }}" build
      - name: Run Gradle build on Wirequery's manager-server
        working-directory: ./wirequery/manager-server
        run: ./gradlew -Pversion="${{  steps.gitversion.outputs.fullSemVer }}" build
      - name: Use Node.js 18.x
        uses: actions/setup-node@v3
        with:
          node-version: 18.x
          cache: 'npm'
          cache-dependency-path: ./wirequery/manager-web/package-lock.json
      - run: npm ci
        working-directory: ./wirequery/manager-web
      - run: npm run generate:schema
        working-directory: ./wirequery/manager-web
      - run: npm run test
        working-directory: ./wirequery/manager-web
      - name: Log in to the Container registry
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GH_TOKEN_PUSH_IMAGES }}
      - name: Extract metadata (tags, labels) for Docker - BE
        id: meta_be
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: ${{ github.repository }}-backend
      - name: Extract metadata (tags, labels) for Docker - FE
        id: meta_fe
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: ${{ github.repository }}-frontend
      - name: Build and push BE Docker image
        uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4
        with:
          context: wirequery/manager-server
          push: true
          tags: ghcr.io/${{ github.repository }}-backend:latest , ghcr.io/${{ github.repository }}-backend:${{ env.DOCKER_IMAGE_VERSION }}
          labels: ${{ steps.meta_be.outputs.labels }}
          visibility: public
          build-args: |
            "VERSION=${{ steps.gitversion.outputs.fullSemVer }}"
      - name: Build and push FE Docker image
        uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4
        with:
          context: wirequery/manager-web
          push: true
          tags: ghcr.io/${{ github.repository }}-frontend:latest , ghcr.io/${{ github.repository }}-frontend:${{ env.DOCKER_IMAGE_VERSION }}
          labels: ${{ steps.meta_fe.outputs.labels }}
          visibility: public
      - name: Publish WireQuery Core
        working-directory: ./sdk/jvm/wirequery-java-core
        if: github.repository == 'wirequery/wirequery'
        env:
          CENTRAL_USERNAME: ${{ secrets.CENTRAL_USERNAME }}
          CENTRAL_TOKEN: ${{ secrets.CENTRAL_TOKEN }}
        run: ./gradlew -Pversion="${{  steps.gitversion.outputs.fullSemVer }}" publish
      - name: Publish WireQuery Spring 5 SDK
        working-directory: ./sdk/jvm/wirequery-spring-5
        if: github.repository == 'wirequery/wirequery'
        env:
          CENTRAL_USERNAME: ${{ secrets.CENTRAL_USERNAME }}
          CENTRAL_TOKEN: ${{ secrets.CENTRAL_TOKEN }}
        run: ./gradlew -Pversion="${{  steps.gitversion.outputs.fullSemVer }}" publish
      - name: Publish WireQuery Spring 6 SDK
        working-directory: ./sdk/jvm/wirequery-spring-6
        if: github.repository == 'wirequery/wirequery'
        env:
          CENTRAL_USERNAME: ${{ secrets.CENTRAL_USERNAME }}
          CENTRAL_TOKEN: ${{ secrets.CENTRAL_TOKEN }}
        run: ./gradlew -Pversion="${{  steps.gitversion.outputs.fullSemVer }}" publish
      - name: Publish WireQuery Spring 2 Starter SDK
        working-directory: ./sdk/jvm/wirequery-spring-boot-2-starter
        if: github.repository == 'wirequery/wirequery'
        env:
          CENTRAL_USERNAME: ${{ secrets.CENTRAL_USERNAME }}
          CENTRAL_TOKEN: ${{ secrets.CENTRAL_TOKEN }}
        run: ./gradlew -Pversion="${{  steps.gitversion.outputs.fullSemVer }}" publish
      - name: Publish WireQuery Spring 3 Starter SDK
        working-directory: ./sdk/jvm/wirequery-spring-boot-3-starter
        if: github.repository == 'wirequery/wirequery'
        env:
          CENTRAL_USERNAME: ${{ secrets.CENTRAL_USERNAME }}
          CENTRAL_TOKEN: ${{ secrets.CENTRAL_TOKEN }}
        run: ./gradlew -Pversion="${{  steps.gitversion.outputs.fullSemVer }}" publish
