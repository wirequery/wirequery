// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.4
// source: wirequery.proto

package wirequerypb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WirequeryServiceClient is the client API for WirequeryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WirequeryServiceClient interface {
	ListenForQueries(ctx context.Context, in *ListenForQueriesRequest, opts ...grpc.CallOption) (WirequeryService_ListenForQueriesClient, error)
	ReportQueryResults(ctx context.Context, in *QueryReports, opts ...grpc.CallOption) (*Empty, error)
}

type wirequeryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWirequeryServiceClient(cc grpc.ClientConnInterface) WirequeryServiceClient {
	return &wirequeryServiceClient{cc}
}

func (c *wirequeryServiceClient) ListenForQueries(ctx context.Context, in *ListenForQueriesRequest, opts ...grpc.CallOption) (WirequeryService_ListenForQueriesClient, error) {
	stream, err := c.cc.NewStream(ctx, &WirequeryService_ServiceDesc.Streams[0], "/wirequerypb.WirequeryService/ListenForQueries", opts...)
	if err != nil {
		return nil, err
	}
	x := &wirequeryServiceListenForQueriesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WirequeryService_ListenForQueriesClient interface {
	Recv() (*QueryMutation, error)
	grpc.ClientStream
}

type wirequeryServiceListenForQueriesClient struct {
	grpc.ClientStream
}

func (x *wirequeryServiceListenForQueriesClient) Recv() (*QueryMutation, error) {
	m := new(QueryMutation)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *wirequeryServiceClient) ReportQueryResults(ctx context.Context, in *QueryReports, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/wirequerypb.WirequeryService/ReportQueryResults", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WirequeryServiceServer is the server API for WirequeryService service.
// All implementations must embed UnimplementedWirequeryServiceServer
// for forward compatibility
type WirequeryServiceServer interface {
	ListenForQueries(*ListenForQueriesRequest, WirequeryService_ListenForQueriesServer) error
	ReportQueryResults(context.Context, *QueryReports) (*Empty, error)
	mustEmbedUnimplementedWirequeryServiceServer()
}

// UnimplementedWirequeryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedWirequeryServiceServer struct {
}

func (UnimplementedWirequeryServiceServer) ListenForQueries(*ListenForQueriesRequest, WirequeryService_ListenForQueriesServer) error {
	return status.Errorf(codes.Unimplemented, "method ListenForQueries not implemented")
}
func (UnimplementedWirequeryServiceServer) ReportQueryResults(context.Context, *QueryReports) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportQueryResults not implemented")
}
func (UnimplementedWirequeryServiceServer) mustEmbedUnimplementedWirequeryServiceServer() {}

// UnsafeWirequeryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WirequeryServiceServer will
// result in compilation errors.
type UnsafeWirequeryServiceServer interface {
	mustEmbedUnimplementedWirequeryServiceServer()
}

func RegisterWirequeryServiceServer(s grpc.ServiceRegistrar, srv WirequeryServiceServer) {
	s.RegisterService(&WirequeryService_ServiceDesc, srv)
}

func _WirequeryService_ListenForQueries_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListenForQueriesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WirequeryServiceServer).ListenForQueries(m, &wirequeryServiceListenForQueriesServer{stream})
}

type WirequeryService_ListenForQueriesServer interface {
	Send(*QueryMutation) error
	grpc.ServerStream
}

type wirequeryServiceListenForQueriesServer struct {
	grpc.ServerStream
}

func (x *wirequeryServiceListenForQueriesServer) Send(m *QueryMutation) error {
	return x.ServerStream.SendMsg(m)
}

func _WirequeryService_ReportQueryResults_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryReports)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WirequeryServiceServer).ReportQueryResults(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wirequerypb.WirequeryService/ReportQueryResults",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WirequeryServiceServer).ReportQueryResults(ctx, req.(*QueryReports))
	}
	return interceptor(ctx, in, info, handler)
}

// WirequeryService_ServiceDesc is the grpc.ServiceDesc for WirequeryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WirequeryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "wirequerypb.WirequeryService",
	HandlerType: (*WirequeryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReportQueryResults",
			Handler:    _WirequeryService_ReportQueryResults_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListenForQueries",
			Handler:       _WirequeryService_ListenForQueries_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "wirequery.proto",
}
